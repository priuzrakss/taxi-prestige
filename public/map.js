// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
var map = L.map('map').setView([55.7558, 37.6173], 10); // –ú–æ—Å–∫–≤–∞
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
var markers = [];
var routeLine = null;

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
var locateControl = L.Control.extend({
    options: { position: 'topright' }, // –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏

    onAdd: function (map) {
        var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

        container.style.backgroundColor = 'white';
        container.style.width = '30px';
        container.style.height = '30px';
        container.style.cursor = 'pointer';

        container.innerHTML = '<i style="line-height:30px; font-size:16px; text-align:center; display:block;">üìç</i>';

        container.onclick = function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var lat = position.coords.latitude;
                    var lng = position.coords.longitude;
                    addMarker([lat, lng]);
                    map.setView([lat, lng], 13); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                }, function () {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
                });
            } else {
                console.log('Geolocation –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }
        };

        return container;
    }
});
map.addControl(new locateControl());

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
function reverseGeocode(latlng, inputId) {
    const geocodeUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}`;

    fetch(geocodeUrl)
        .then(response => response.json())
        .then(data => {
            if (data && data.display_name) {
                document.getElementById(inputId).value = data.display_name; // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            } else {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å');
            }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
function handleAddressInputWithSuggestions(inputId, resultsId, markerIndex) {
    document.getElementById(inputId).addEventListener('input', function (e) {
        const query = e.target.value.trim();
        const resultsContainer = document.getElementById(resultsId);

        if (query.length > 2) {
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    resultsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

                    data.forEach(location => {
                        const li = document.createElement('li');
                        li.textContent = location.display_name;
                        li.addEventListener('click', () => {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
                            document.getElementById(inputId).value = location.display_name;

                            // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                            const lat = parseFloat(location.lat);
                            const lon = parseFloat(location.lon);
                            if (markers[markerIndex]) {
                                markers[markerIndex].setLatLng([lat, lon]); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
                            } else {
                                addMarker([lat, lon]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                            }

                            map.setView([lat, lon], 13); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
                            updateRoute(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
                            resultsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        });
                        resultsContainer.appendChild(li);
                    });
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞:', error));
        } else {
            resultsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
function addMarker(latlng) {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–≤–∞ –º–∞—Ä–∫–µ—Ä–∞, —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π (—Å—Ç–∞—Ä—ã–π)
    if (markers.length >= 2) {
        map.removeLayer(markers[0]); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç—ã
        markers.shift(); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
    }

    var marker = L.marker(latlng, { draggable: true }).addTo(map); // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    markers.push(marker);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–∏—Ç—å (–Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞)
    if (markers.length === 1) {
        reverseGeocode(latlng, 'from-address'); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞"
    } else if (markers.length === 2) {
        reverseGeocode(latlng, 'to-address'); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞"
    }

    updateRoute(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "dragend" –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    marker.on('dragend', function () {
        const newLatLng = marker.getLatLng();
        if (markers[0] === marker) {
            reverseGeocode(newLatLng, 'from-address'); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞"
        } else if (markers[1] === marker) {
            reverseGeocode(newLatLng, 'to-address'); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞"
        }
        updateRoute();
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
    marker.on('dblclick', function () {
        map.removeLayer(marker); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç—ã
        markers = markers.filter(m => m !== marker); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
        updateRoute(); // –ü–µ—Ä–µ—Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∞
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OSRM
function drawRouteWithOSRM(points) {
    if (points.length < 2) return; // –ú–∞—Ä—à—Ä—É—Ç —Å—Ç—Ä–æ–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–µ —Ç–æ—á–∫–∏

    const routeUrl = `https://router.project-osrm.org/route/v1/driving/${points.map(p => `${p.lng},${p.lat}`).join(';')}?overview=full&geometries=geojson`;

    fetch(routeUrl)
        .then(response => response.json())
        .then(data => {
            if (routeLine) {
                map.removeLayer(routeLine); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
            }

            const route = data.routes[0].geometry; // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
            routeLine = L.geoJSON(route, { color: 'blue', weight: 5 }).addTo(map); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ

            calculateDistanceAndPrice(data.routes[0].distance); // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error));
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
function updateRoute() {
    const points = markers.map(marker => marker.getLatLng());
    drawRouteWithOSRM(points); // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —Ç–æ—á–∫–∞–º
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculateDistanceAndPrice(distanceInMeters) {
    const distanceInKm = distanceInMeters / 1000; // –ü–µ—Ä–µ–≤–æ–¥ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    console.log(`–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceInKm.toFixed(2)} –∫–º`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
    const currentTariff = tariffs[currentTariffIndex];
    const pricePerKm = currentTariff.price;

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const price = distanceInKm * pricePerKm;
    document.getElementById('price').textContent = `${price.toFixed(2)} ‚ÇΩ`;
}

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫ –ø–æ–ª—è–º –∞–¥—Ä–µ—Å–æ–≤
handleAddressInputWithSuggestions('from-address', 'from-address-results', 0); // –ü–æ–ª–µ "–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞"
handleAddressInputWithSuggestions('to-address', 'to-address-results', 1);   // –ü–æ–ª–µ "–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞"

// –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
map.on('click', function (e) {
    addMarker(e.latlng); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –º–µ—Å—Ç–æ –∫–ª–∏–∫–∞
});


document.getElementById('comment_btn').addEventListener('click', function() {
    const popup = document.getElementById('popup');
    popup.style.display = 'block';
});

document.getElementById('close_popup').addEventListener('click', function() {
    const popup = document.getElementById('popup');
    popup.style.display = 'none';
});



const tariffs = [
    { name: '—ç–∫–æ–Ω–æ–º', price: 30 },
    { name: '–∫–æ–º—Ñ–æ—Ä—Ç', price: 35 },
    { name: '–∫–æ–º—Ñ–æ—Ä—Ç +', price: 45 },
    { name: '–±–∏–∑–Ω–µ—Å', price: 55 },
    { name: '–º–∏–Ω–∏–≤–µ–Ω', price: 50 }
];

// –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
let currentTariffIndex = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞
const tariffText = document.getElementById('tariff');
const priceText = document.getElementById('price-to-km');

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
function updateTariffDisplay() {
    const currentTariff = tariffs[currentTariffIndex];
    tariffText.textContent = `${currentTariff.name}`;
    priceText.textContent = `${currentTariff.price}‚ÇΩ/–∫–º`;

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (markers.length === 2 && routeLine) {
        const points = markers.map(marker => marker.getLatLng());
        const routeUrl = `https://router.project-osrm.org/route/v1/driving/${points.map(p => `${p.lng},${p.lat}`).join(';')}?overview=false`;

        fetch(routeUrl)
            .then(response => response.json())
            .then(data => {
                if (data.routes && data.routes[0]) {
                    calculateDistanceAndPrice(data.routes[0].distance);
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞:', error));
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
document.getElementById('next_btn').addEventListener('click', function () {
    currentTariffIndex = (currentTariffIndex + 1) % tariffs.length; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ
    updateTariffDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
document.getElementById('back_btn').addEventListener('click', function () {
    currentTariffIndex = (currentTariffIndex - 1 + tariffs.length) % tariffs.length; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞—Ä–∏—Ñ
    updateTariffDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
updateTariffDisplay();

let isOrderButtonDisabled = false;

document.querySelector('.shadow_box_btn_2').addEventListener('click', () => {
    if (isOrderButtonDisabled) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.', 'error');
        return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
    const fromAddress = document.getElementById('from-address').value;
    const toAddress = document.getElementById('to-address').value;
    const date = document.querySelector('.input_date').value;
    const time = document.querySelector('.input_time').value;
    const name = document.querySelector('.input_name').value;
    const phone = document.querySelector('.input_tel').value;
    const comment = document.getElementById('comment_input').value;
    const tariff = document.getElementById('tariff').textContent;
    const price = document.getElementById('price').textContent;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!fromAddress || !toAddress || !date || !time || !name || !phone) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+7\d{10}$/; // –§–æ—Ä–º–∞—Ç: +7 –∏ 10 —Ü–∏—Ñ—Ä
    if (!phoneRegex.test(phone)) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.', 'error');
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
    const orderData = {
        fromAddress,
        toAddress,
        date,
        time,
        name,
        phone,
        comment,
        tariff,
        price
    };

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    isOrderButtonDisabled = true;
    document.querySelector('.shadow_box_btn_2').disabled = true;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('http://localhost:3000/api/order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(orderData)
    })
    .then(response => {
        if (response.ok) {
            showMessage('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
        } else {
            return response.json().then(err => {
                throw new Error(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.');
            });
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        showMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: ${error.message}`, 'error');
    })
    .finally(() => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            isOrderButtonDisabled = false;
            document.querySelector('.shadow_box_btn_2').disabled = false;
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    });
});

document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const selectedTariff = urlParams.get('tariff'); // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "tariff"

    if (selectedTariff) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        const tariffDisplay = document.getElementById('tariff');
        if (tariffDisplay) {
            tariffDisplay.textContent = selectedTariff; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        }

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –∫–º
        const tariffs = {
            "—ç–∫–æ–Ω–æ–º": 30,
            "–∫–æ–º—Ñ–æ—Ä—Ç": 35,
            '–∫–æ–º—Ñ–æ—Ä—Ç+': 45,
            "–±–∏–∑–Ω–µ—Å—Å": 55,
            "–º–∏–Ω–∏–≤–µ–Ω": 50
        };

        const pricePerKm = tariffs[selectedTariff];
        if (pricePerKm) {
            const priceDisplay = document.getElementById('price-to-km');
            if (priceDisplay) {
                priceDisplay.textContent = `–¶–µ–Ω–∞ –∑–∞ –∫–º: ${pricePerKm}‚ÇΩ`;
            }
        }
    }
});

function showMessage(message, type = 'error') {
    const messageBox = document.getElementById('message-box');
    messageBox.textContent = message;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageBox.className = `message-box ${type}`;
    messageBox.classList.remove('hidden');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        messageBox.style.opacity = '1';
        messageBox.style.transform = 'translateY(0)';
    }, 10);

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        messageBox.style.opacity = '0';
        messageBox.style.transform = 'translateY(-20px)';
        setTimeout(() => {
            messageBox.classList.add('hidden');
        }, 300);
    }, 3000);
}
